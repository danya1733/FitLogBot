// scheduler.js
const cron = require('node-cron');
const moment = require('moment-timezone');
const mongoose = require('mongoose');
const User = require('./models/user');
const userStates = require('./states');
const { generateMedicationsMenu } = require('./commands/mainMenu');

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏—ë–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤
 * –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
 * –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏ –¥–æ–∑–∞–º–∏.
 */
async function sendCombinedMedicationReminder(bot, chatId, newDueDoses) {
  if (newDueDoses.length === 0) return;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ pendingReminders
    const user = await User.findOne({ chatId }).exec();
    if (!user) {
      console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      return;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∑—ã –∏–∑ pendingReminders
    let accumulatedDoses = [];
    if (user.pendingReminders.length > 0) {
      user.pendingReminders.forEach(reminder => {
        accumulatedDoses.push(...reminder.data);
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ–∑—ã, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    newDueDoses.forEach(newDose => {
      const exists = accumulatedDoses.some(dose =>
        dose.medicationType === newDose.medicationType &&
        dose.medicationIndex === newDose.medicationIndex &&
        dose.doseNumber === newDose.doseNumber
      );
      if (!exists) {
        accumulatedDoses.push({
          ...newDose,
          status: '–ù–µ –≤—ã–±—Ä–∞–Ω–æ',
        });
      }
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (user.pendingReminders.length > 0) {
      for (const reminder of user.pendingReminders) {
        try {
          await bot.deleteMessage(chatId, reminder.messageId.toString());
          console.log(`–°—Ç–∞—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}, messageId: ${reminder.messageId}`);
        } catch (err) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${reminder.messageId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}:`, err);
        }
      }
      // –û—á–∏—â–∞–µ–º pendingReminders
      user.pendingReminders = [];
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üïí –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏—ë–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤:\n\n`;
    const inlineKeyboard = [];

    accumulatedDoses.forEach((dose, index) => {
      const { medicationType, medicationIndex, doseNumber, medicationName, status } = dose;
      message += `*${index + 1}. –î–æ–∑–∞ ${doseNumber}:* ${medicationName} ‚Äî *${status}*\n`;

      inlineKeyboard.push([
        {
          text: `‚úÖ –ü—Ä–∏–Ω—è–ª${status === '–ü—Ä–∏–Ω—è—Ç' ? ' ‚úÖ' : ''}`,
          callback_data: `status_${medicationType}_${medicationIndex}_${doseNumber}_taken`,
        },
        {
          text: `‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 3 —á–∞—Å–∞${status === '–û—Ç–ª–æ–∂–µ–Ω' ? ' ‚úÖ' : ''}`,
          callback_data: `status_${medicationType}_${medicationIndex}_${doseNumber}_delay`,
        },
      ]);
    });

    // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    inlineKeyboard.push([
      {
        text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
        callback_data: `confirm_changes`,
      },
    ]);

    const options = {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: inlineKeyboard,
      },
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const sentMessage = await bot.sendMessage(chatId, message, options);
    console.log(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}, messageId: ${sentMessage.message_id}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const reminderData = accumulatedDoses.map(dose => ({
      medicationType: dose.medicationType,
      medicationIndex: dose.medicationIndex,
      doseNumber: dose.doseNumber,
      medicationName: dose.medicationName,
      status: dose.status,
    }));

    user.pendingReminders.push({
      messageId: sentMessage.message_id,
      data: reminderData,
    });

    await user.save();
    console.log(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', err);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∑—ã.
 * –¢–µ–ø–µ—Ä—å –æ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
 */
async function processDoseStatusChange(user, medicationType, medicationIndex, doseNumber, status, bot, chatId) {
  const medication = user.medications[medicationType]?.[medicationIndex];
  if (!medication) {
    console.error(`–¢–∏–ø –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞ ${medicationType} —Å –∏–Ω–¥–µ–∫—Å–æ–º ${medicationIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è chatId ${chatId}.`);
    return;
  }

  const dose = medication.doses.find(d => d.doseNumber === doseNumber);
  if (!dose) {
    console.error(`–ù–æ–º–µ—Ä –¥–æ–∑—ã ${doseNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–∏–ø–∞ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞ ${medicationType} —Å –∏–Ω–¥–µ–∫—Å–æ–º ${medicationIndex}.`);
    return;
  }

  console.log(`–î–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: dose.taken = ${dose.taken}, dose.status = ${dose.status}`);

  if (status === '–ü—Ä–∏–Ω—è—Ç') {
    if (dose.taken) {
      console.log(`–î–æ–∑–∞ ${doseNumber} —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–∞.`);
      return;
    }

    // –û—Ç–º–µ—Ç–∏—Ç—å –¥–æ–∑—É –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç—É—é
    dose.taken = true;
    dose.takenAt = new Date();
    dose.status = '–ü—Ä–∏–Ω—è—Ç'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å

    if (medicationType === 'flacons' || medicationType === 'tablets') {
      // –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
      medication.quantity -= 1;

      if (medication.quantity <= 0) {
        // –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
        user.medications[medicationType].splice(medicationIndex, 1);
        console.log(`–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç ${medication.name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è chatId ${chatId} –∏–∑-–∑–∞ –Ω—É–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.`);
      } else {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∑ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const takenDoses = medication.doses.filter(d => d.taken).length;
        const totalDoses = takenDoses + medication.quantity;

        console.log(`–î–æ–∑–∞ ${doseNumber} —Ç–∏–ø–∞ ${medicationType} —Å –∏–Ω–¥–µ–∫—Å–æ–º ${medicationIndex} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–∞ –¥–ª—è chatId ${chatId}. –û—Å—Ç–∞–ª–æ—Å—å: ${medication.quantity} –¥–æ–∑.`);
      }
    } else if (medicationType === 'syringes') {
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—Å–µ –ª–∏ –¥–æ–∑—ã –ø—Ä–∏–Ω—è—Ç—ã
      const allDosesTaken = medication.doses.every(d => d.taken);

      if (allDosesTaken) {
        // –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
        medication.quantity -= 1;

        if (medication.quantity > 0) {
          // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–æ–∑—ã
          medication.doses.forEach(d => {
            d.taken = false;
            d.takenAt = null;
            d.status = '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'; // –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å
          });

          // –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
          let lastDoseDate = moment().tz(user.timezone || 'Etc/GMT-4');
          const scheduleType = medication.schedule.type;
          if (scheduleType === 'daily') {
            lastDoseDate.add(1, 'day');
          } else if (scheduleType === 'weekly') {
            lastDoseDate.add(1, 'week');
          } else if (scheduleType === 'monthly') {
            lastDoseDate.add(1, 'month');
          }

          // –û–±–Ω–æ–≤–∏—Ç—å startDate –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
          medication.schedule.details.startDate = lastDoseDate.toDate();

          // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–æ–∑
          const dosesPerPen = medication.dosesPerPen || medication.doses.length;
          const newDoses = [];
          let currentDate = lastDoseDate.clone();

          for (let i = 0; i < dosesPerPen; i++) {
            newDoses.push({
              doseNumber: i + 1,
              taken: false,
              takenAt: null,
              scheduledAt: currentDate.toDate(),
              status: '–ù–µ –≤—ã–±—Ä–∞–Ω–æ', // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
            });

            // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –¥–æ–∑—ã
            if (scheduleType === 'daily') {
              currentDate.add(1, 'day');
            } else if (scheduleType === 'weekly') {
              currentDate.add(1, 'week');
            } else if (scheduleType === 'monthly') {
              currentDate.add(1, 'month');
            }
          }

          medication.doses = newDoses;

          console.log(`–®–ø—Ä–∏—Ü —Å –∏–Ω–¥–µ–∫—Å–æ–º ${medicationIndex} —Å–±—Ä–æ—à–µ–Ω –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è chatId ${chatId}. –û—Å—Ç–∞–ª–æ—Å—å: ${medication.quantity} —à–ø—Ä–∏—Ü–æ–≤.`);
        } else {
          // –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
          user.medications.syringes.splice(medicationIndex, 1);
          console.log(`–®–ø—Ä–∏—Ü —Å –∏–Ω–¥–µ–∫—Å–æ–º ${medicationIndex} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è chatId ${chatId} –∏–∑-–∑–∞ –Ω—É–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.`);
        }
      }
    } else {
      console.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞: ${medicationType}`);
    }

  } else if (status === '–û—Ç–ª–æ–∂–µ–Ω') {
    const newScheduledAt = moment().add(3, 'hours').toDate();
    dose.scheduledAt = newScheduledAt;
    dose.status = '–û—Ç–ª–æ–∂–µ–Ω'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    console.log(`–î–æ–∑–∞ ${doseNumber} —Ç–∏–ø–∞ ${medicationType} —Å –∏–Ω–¥–µ–∫—Å–æ–º ${medicationIndex} –æ—Ç–ª–æ–∂–µ–Ω–∞ –¥–ª—è chatId ${chatId}`);
  } else {
    console.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${status}`);
  }

  console.log(`–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: dose.taken = ${dose.taken}, dose.status = ${dose.status}`);

  // –£–∫–∞–∑—ã–≤–∞–µ–º Mongoose, —á—Ç–æ –ø—É—Ç—å –∏–∑–º–µ–Ω—ë–Ω
  user.markModified(`medications.${medicationType}.${medicationIndex}.doses`);
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∑—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
 */
async function applyPendingChanges(user, bot, chatId) {
  const changes = [];

  for (const reminder of user.pendingReminders) {
    for (const dose of reminder.data) {
      if (dose.status !== '–ù–µ –≤—ã–±—Ä–∞–Ω–æ') {
        changes.push(dose);
        await processDoseStatusChange(user, dose.medicationType, dose.medicationIndex, dose.doseNumber, dose.status, bot, chatId);
      }
    }
  }

  await user.save();

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  let summaryMessage = `‚úÖ *–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã:*\n\n`;

  changes.forEach(dose => {
    const { medicationType, medicationName, doseNumber, status } = dose;

    if (medicationType === 'syringes') {
      const syringe = user.medications.syringes.find((med, index) => index === dose.medicationIndex);
      const remainingDoses = syringe ? syringe.doses.filter(d => !d.taken).length : 0;
      const totalDoses = syringe ? syringe.doses.length : 0;
      summaryMessage += `*–î–æ–∑–∞ ${doseNumber}* —à–ø—Ä–∏—Ü–∞ *${medicationName}* ${status === '–ü—Ä–∏–Ω—è—Ç' ? '–ø—Ä–∏–Ω—è—Ç–∞' : '–æ—Ç–ª–æ–∂–µ–Ω–∞'}. –û—Å—Ç–∞–ª–æ—Å—å: *${remainingDoses}/${totalDoses}* –¥–æ–∑.\n`;
    } else {
      const medication = user.medications[medicationType].find((med, index) => index === dose.medicationIndex);
      const remainingDoses = medication ? medication.quantity : 0;
      const takenDoses = medication ? medication.doses.filter(d => d.taken).length : 0;
      const totalDoses = takenDoses + remainingDoses;
      summaryMessage += `*–î–æ–∑–∞ ${doseNumber}* –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ *${medicationName}* ${status === '–ü—Ä–∏–Ω—è—Ç' ? '–ø—Ä–∏–Ω—è—Ç–∞' : '–æ—Ç–ª–æ–∂–µ–Ω–∞'}. –û—Å—Ç–∞–ª–æ—Å—å: *${remainingDoses}* –¥–æ–∑ –∏–∑ *${totalDoses}*.\n`;
    }
  });

  await bot.sendMessage(chatId, summaryMessage, { parse_mode: 'Markdown' });
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
 */
async function checkAndSendReminders(bot) {
  const now = moment.utc();

  try {
    // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await User.find({ subscribed: true }).exec();

    for (const user of users) {
      const { chatId, medications, timezone } = user;
      const userTimezone = timezone || 'Etc/GMT-4';
      const userNow = now.clone().tz(userTimezone);

      const dueDoses = [];

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤
      const processMedications = (medicationType) => {
        if (medications && medications[medicationType]) {
          medications[medicationType].forEach((medication, medicationIndex) => {
            if (medication.doses) {
              medication.doses.forEach((dose) => {
                if (!dose.taken && dose.scheduledAt) {
                  const doseTime = moment(dose.scheduledAt).tz(userTimezone);
                  if (doseTime.isSame(userNow, 'minute')) {
                    dueDoses.push({
                      medicationType,
                      medicationIndex,
                      doseNumber: dose.doseNumber,
                      medicationName: medication.name,
                    });
                  }
                }
              });
            }
          });
        }
      };

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–ø—Ä–∏—Ü–æ–≤, —Ñ–ª–∞–∫–æ–Ω–æ–≤ –∏ —Ç–∞–±–ª–µ—Ç–æ–∫
      processMedications('syringes');
      processMedications('flacons');
      processMedications('tablets');

      if (dueDoses.length > 0) {
        console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId} –ø–æ –¥–æ–∑–∞–º:`, dueDoses);
        await sendCombinedMedicationReminder(bot, chatId, dueDoses);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ checkAndSendReminders:', error);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
 */
function startScheduler(bot) {
  // –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  cron.schedule('* * * * *', () => {
    console.log('Scheduler: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤', new Date());
    checkAndSendReminders(bot).catch((err) => console.error('Scheduler Error:', err));
  });

  console.log('Scheduler: –ó–∞–ø—É—â–µ–Ω');
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–æ–∑.
 */
async function handleDoseAction(bot, query) {
  const chatId = query.message.chat.id;
  const data = query.data;

  const [action, medicationType, medicationIndex, doseNumber] = data.split('_');

  if (!action || !medicationType || medicationIndex === undefined || doseNumber === undefined) {
    console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data:', data);
    bot.answerCallbackQuery(query.id, { text: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.' });
    return;
  }

  const statusAction = action === 'taken' ? '–ü—Ä–∏–Ω—è—Ç' : action === 'delay' ? '–û—Ç–ª–æ–∂–µ–Ω' : null;

  if (statusAction) {
    try {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è ${statusAction} –¥–ª—è –¥–æ–∑—ã ${doseNumber} —Ç–∏–ø–∞ ${medicationType} [Index: ${medicationIndex}] –¥–ª—è chatId ${chatId}`);
      const user = await User.findOne({ chatId }).exec();
      if (!user) {
        console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        bot.answerCallbackQuery(query.id, { text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
        return;
      }

      // –ù–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –¥–æ–∑—É –≤ pendingReminders
      let doseFound = false;
      for (const reminder of user.pendingReminders) {
        const dose = reminder.data.find(d =>
          d.medicationType === medicationType &&
          d.medicationIndex === parseInt(medicationIndex, 10) &&
          d.doseNumber === parseInt(doseNumber, 10)
        );
        if (dose) {
          if (dose.status !== '–ù–µ –≤—ã–±—Ä–∞–Ω–æ') {
            // –£–∂–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ
            bot.answerCallbackQuery(query.id, { text: `–î–æ–∑–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ ${dose.status}.` });
            return;
          }
          dose.status = statusAction;
          doseFound = true;
          break;
        }
      }

      if (!doseFound) {
        console.error(`–î–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ pendingReminders –¥–ª—è chatId ${chatId}, doseNumber ${doseNumber}.`);
        bot.answerCallbackQuery(query.id, { text: '–î–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.' });
        return;
      }

      await user.save();
      console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∑—ã.`);

      bot.answerCallbackQuery(query.id, { text: `–î–æ–∑–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ ${statusAction === '–ü—Ä–∏–Ω—è—Ç' ? '–ø—Ä–∏–Ω—è—Ç–∞' : '–æ—Ç–ª–æ–∂–µ–Ω–∞'}.` });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
      const reminder = user.pendingReminders.find(rem => rem.data.some(d =>
        d.medicationType === medicationType &&
        d.medicationIndex === parseInt(medicationIndex, 10) &&
        d.doseNumber === parseInt(doseNumber, 10)
      ));

      if (reminder) {
        const messageId = reminder.messageId;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        let updatedMessage = `üïí –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏—ë–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤:\n\n`;
        const inlineKeyboard = [];

        reminder.data.forEach((dose, index) => {
          const { medicationType, medicationIndex, doseNumber, medicationName, status } = dose;
          updatedMessage += `*${index + 1}. –î–æ–∑–∞ ${doseNumber}:* ${medicationName} ‚Äî *${status}*\n`;

          inlineKeyboard.push([
            {
              text: `‚úÖ –ü—Ä–∏–Ω—è–ª${status === '–ü—Ä–∏–Ω—è—Ç' ? ' ‚úÖ' : ''}`,
              callback_data: `status_${medicationType}_${medicationIndex}_${doseNumber}_taken`,
            },
            {
              text: `‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 3 —á–∞—Å–∞${status === '–û—Ç–ª–æ–∂–µ–Ω' ? ' ‚úÖ' : ''}`,
              callback_data: `status_${medicationType}_${medicationIndex}_${doseNumber}_delay`,
            },
          ]);
        });

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        inlineKeyboard.push([
          {
            text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
            callback_data: `confirm_changes`,
          },
        ]);

        const options = {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: inlineKeyboard,
          },
        };

        try {
          await bot.editMessageText(updatedMessage, {
            chat_id: chatId,
            message_id: messageId,
            ...options,
          });
          console.log(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}, messageId: ${messageId}`);
        } catch (err) {
          if (err.response && err.response.description === 'message is not modified: specified new message content and reply markup are exactly the same as a current content and reply markup of the message') {
            console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.');
          } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
          }
        }
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–∑—ã:', error);
      bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.' });
    }
    return;
  }

  // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
  console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', action);
  bot.answerCallbackQuery(query.id, { text: '–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.' });
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.
 */
async function handleCombinedDoseAction(bot, query) {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const data = query.data;

  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const user = await User.findOne({ chatId }).exec();
    if (!user) {
      console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      bot.answerCallbackQuery(query.id, { text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
      return;
    }

    // –ü–æ–∏—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ messageId
    const reminder = user.pendingReminders.find(rem => rem.messageId === messageId);
    if (!reminder) {
      console.error(`–ù–µ—Ç pendingReminders –¥–ª—è chatId ${chatId} –∏ messageId ${messageId}`);
      bot.answerCallbackQuery(query.id, { text: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.' });
      return;
    }

    if (data.startsWith('status_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∑—ã
      const parts = data.split('_');
      const [statusKeyword, medicationType, medicationIndex, doseNumber, statusActionKey] = parts;

      if (!medicationType || medicationIndex === undefined || doseNumber === undefined || !statusActionKey) {
        console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data:', data);
        bot.answerCallbackQuery(query.id, { text: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.' });
        return;
      }

      const statusAction = statusActionKey === 'taken' ? '–ü—Ä–∏–Ω—è—Ç' : statusActionKey === 'delay' ? '–û—Ç–ª–æ–∂–µ–Ω' : null;

      if (!statusAction) {
        console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å—Ç–∞—Ç—É—Å–∞:', statusActionKey);
        bot.answerCallbackQuery(query.id, { text: '–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.' });
        return;
      }

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –¥–æ–∑—ã –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      const dose = reminder.data.find(d =>
        d.medicationType === medicationType &&
        d.medicationIndex.toString() === medicationIndex &&
        d.doseNumber.toString() === doseNumber
      );

      if (!dose) {
        console.error(`–î–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–ª—é—á–∞: ${medicationType}_${medicationIndex}_${doseNumber}`);
        bot.answerCallbackQuery(query.id, { text: '–î–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
        return;
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∑—ã –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      dose.status = statusAction;
      console.log(`–°—Ç–∞—Ç—É—Å –¥–ª—è ${medicationType}_${medicationIndex}_${doseNumber} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${statusAction}`);

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await user.save();
      console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∑—ã –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏.`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
      let updatedMessage = `üïí –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏—ë–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤:\n\n`;
      const inlineKeyboard = [];

      reminder.data.forEach((dose, index) => {
        const { medicationType, medicationIndex, doseNumber, medicationName, status } = dose;
        updatedMessage += `*${index + 1}. –î–æ–∑–∞ ${doseNumber}:* ${medicationName} ‚Äî *${status}*\n`;

        inlineKeyboard.push([
          {
            text: `‚úÖ –ü—Ä–∏–Ω—è–ª${status === '–ü—Ä–∏–Ω—è—Ç' ? ' ‚úÖ' : ''}`,
            callback_data: `status_${medicationType}_${medicationIndex}_${doseNumber}_taken`,
          },
          {
            text: `‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 3 —á–∞—Å–∞${status === '–û—Ç–ª–æ–∂–µ–Ω' ? ' ‚úÖ' : ''}`,
            callback_data: `status_${medicationType}_${medicationIndex}_${doseNumber}_delay`,
          },
        ]);
      });

      // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      inlineKeyboard.push([
        {
          text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
          callback_data: `confirm_changes`,
        },
      ]);

      const options = {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: inlineKeyboard,
        },
      };

      try {
        await bot.editMessageText(updatedMessage, {
          chat_id: chatId,
          message_id: messageId,
          ...options,
        });
        console.log(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}, messageId: ${messageId}`);
      } catch (err) {
        if (err.response && err.response.description === 'message is not modified: specified new message content and reply markup are exactly the same as a current content and reply markup of the message') {
          console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.');
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        }
      }

      bot.answerCallbackQuery(query.id, { text: '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω.' });
      return;
    }

    if (data === 'confirm_changes') {
      // –°–±–æ—Ä –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
      const changes = reminder.data.filter(dose => dose.status !== '–ù–µ –≤—ã–±—Ä–∞–Ω–æ');

      if (changes.length === 0) {
        bot.answerCallbackQuery(query.id, { text: '–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.' });
        return;
      }

      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      for (const dose of changes) {
        await processDoseStatusChange(
          user,
          dose.medicationType,
          dose.medicationIndex,
          dose.doseNumber,
          dose.status,
          bot,
          chatId
        );
      }

      await user.save();
      console.log(`–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}.`);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      let summaryMessage = `‚úÖ *–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã:*\n\n`;

      changes.forEach(dose => {
        const { medicationType, medicationName, doseNumber, status } = dose;

        if (medicationType === 'syringes') {
          const syringe = user.medications.syringes.find((med, index) => index === dose.medicationIndex);
          const remainingDoses = syringe ? syringe.doses.filter(d => !d.taken).length : 0;
          const totalDoses = syringe ? syringe.doses.length : 0;
          summaryMessage += `*–î–æ–∑–∞ ${doseNumber}* —à–ø—Ä–∏—Ü–∞ *${medicationName}* ${status === '–ü—Ä–∏–Ω—è—Ç' ? '–ø—Ä–∏–Ω—è—Ç–∞' : '–æ—Ç–ª–æ–∂–µ–Ω–∞'}. –û—Å—Ç–∞–ª–æ—Å—å: *${remainingDoses}/${totalDoses}* –¥–æ–∑.\n`;
        } else {
          const medication = user.medications[medicationType].find((med, index) => index === dose.medicationIndex);
          const remainingDoses = medication ? medication.quantity : 0;
          const takenDoses = medication ? medication.doses.filter(d => d.taken).length : 0;
          const totalDoses = takenDoses + remainingDoses;
          summaryMessage += `*–î–æ–∑–∞ ${doseNumber}* –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ *${medicationName}* ${status === '–ü—Ä–∏–Ω—è—Ç' ? '–ø—Ä–∏–Ω—è—Ç–∞' : '–æ—Ç–ª–æ–∂–µ–Ω–∞'}. –û—Å—Ç–∞–ª–æ—Å—å: *${remainingDoses}* –¥–æ–∑ –∏–∑ *${totalDoses}*.\n`;
        }
      });

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      await bot.sendMessage(chatId, summaryMessage, { parse_mode: 'Markdown' });

      // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ pendingReminders
      user.pendingReminders = user.pendingReminders.filter(rem => rem.messageId !== messageId);
      await user.save();
      console.log(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ messageId: ${messageId} —É–¥–∞–ª–µ–Ω–æ –∏–∑ pendingReminders –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}.`);

      // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      if (!userStates[chatId]) {
        userStates[chatId] = {};
      }
      userStates[chatId] = {};
      userStates[chatId].step = 'weight_update';

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å
      await bot.sendMessage(chatId, '–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –≤–µ—Å?', {
        reply_markup: {
          keyboard: [
            [{ text: '–î–∞' }, { text: '–ù–µ—Ç' }],
          ],
          one_time_keyboard: true,
          resize_keyboard: true,
        },
      });

      bot.answerCallbackQuery(query.id, { text: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.' });
      return;
    }

    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', data);
    bot.answerCallbackQuery(query.id, { text: '–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–∑—ã:', error);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.' });
  }
}

module.exports = {
  startScheduler,
  handleDoseAction,
  handleCombinedDoseAction,
};
